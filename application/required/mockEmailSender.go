// Code generated by MockGen. DO NOT EDIT.
// Source: application/required/emailSender.go
//
// Generated by this command:
//
//	mockgen -source=application/required/emailSender.go -destination=application/required/mockEmailSender.go -package required
//

// Package required is a generated GoMock package.
package required

import (
	context "context"
	domain "goplearn/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
	isgomock struct{}
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEmailSender) Send(ctx context.Context, email *domain.Email, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, email, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailSenderMockRecorder) Send(ctx, email, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailSender)(nil).Send), ctx, email, subject, body)
}
