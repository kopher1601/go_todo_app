// Code generated by MockGen. DO NOT EDIT.
// Source: application/provided/memberFinder.go
//
// Generated by this command:
//
//	mockgen -source=application/provided/memberFinder.go -destination=application/provided/mockMemberFinder.go -package provided
//

// Package provided is a generated GoMock package.
package provided

import (
	context "context"
	domain "goplearn/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMemberFinder is a mock of MemberFinder interface.
type MockMemberFinder struct {
	ctrl     *gomock.Controller
	recorder *MockMemberFinderMockRecorder
	isgomock struct{}
}

// MockMemberFinderMockRecorder is the mock recorder for MockMemberFinder.
type MockMemberFinderMockRecorder struct {
	mock *MockMemberFinder
}

// NewMockMemberFinder creates a new mock instance.
func NewMockMemberFinder(ctrl *gomock.Controller) *MockMemberFinder {
	mock := &MockMemberFinder{ctrl: ctrl}
	mock.recorder = &MockMemberFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberFinder) EXPECT() *MockMemberFinderMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockMemberFinder) Find(ctx context.Context, memberID int) (*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, memberID)
	ret0, _ := ret[0].(*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMemberFinderMockRecorder) Find(ctx, memberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMemberFinder)(nil).Find), ctx, memberID)
}
