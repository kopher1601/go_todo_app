// Code generated by MockGen. DO NOT EDIT.
// Source: application/provided/memberRegister.go
//
// Generated by this command:
//
//	mockgen -source=application/provided/memberRegister.go -destination=application/provided/mockMemberRegister.go
//

// Package mock_provided is a generated GoMock package.
package provided

import (
	context "context"
	domain "goplearn/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMemberRegister is a mock of MemberRegister interface.
type MockMemberRegister struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRegisterMockRecorder
	isgomock struct{}
}

// MockMemberRegisterMockRecorder is the mock recorder for MockMemberRegister.
type MockMemberRegisterMockRecorder struct {
	mock *MockMemberRegister
}

// NewMockMemberRegister creates a new mock instance.
func NewMockMemberRegister(ctrl *gomock.Controller) *MockMemberRegister {
	mock := &MockMemberRegister{ctrl: ctrl}
	mock.recorder = &MockMemberRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRegister) EXPECT() *MockMemberRegisterMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockMemberRegister) Register(ctx context.Context, registerRequest *domain.MemberRegisterRequest) (*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, registerRequest)
	ret0, _ := ret[0].(*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockMemberRegisterMockRecorder) Register(ctx, registerRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMemberRegister)(nil).Register), ctx, registerRequest)
}
