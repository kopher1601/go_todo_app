// Code generated by MockGen. DO NOT EDIT.
// Source: domain/passwordEncoder.go
//
// Generated by this command:
//
//	mockgen -source=domain/passwordEncoder.go -destination=domain/mockPasswordEncoder.go -package=domain
//

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordEncoder is a mock of PasswordEncoder interface.
type MockPasswordEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordEncoderMockRecorder
	isgomock struct{}
}

// MockPasswordEncoderMockRecorder is the mock recorder for MockPasswordEncoder.
type MockPasswordEncoderMockRecorder struct {
	mock *MockPasswordEncoder
}

// NewMockPasswordEncoder creates a new mock instance.
func NewMockPasswordEncoder(ctrl *gomock.Controller) *MockPasswordEncoder {
	mock := &MockPasswordEncoder{ctrl: ctrl}
	mock.recorder = &MockPasswordEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordEncoder) EXPECT() *MockPasswordEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockPasswordEncoder) Encode(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockPasswordEncoderMockRecorder) Encode(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPasswordEncoder)(nil).Encode), password)
}

// Matches mocks base method.
func (m *MockPasswordEncoder) Matches(password, encodedPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", password, encodedPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Matches indicates an expected call of Matches.
func (mr *MockPasswordEncoderMockRecorder) Matches(password, encodedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockPasswordEncoder)(nil).Matches), password, encodedPassword)
}
